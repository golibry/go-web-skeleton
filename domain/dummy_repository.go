package domain

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/golibry/go-web-skeleton/infrastructure/registry"
)

type DummyRepository struct {
	dbService registry.DbService
}

func NewDummyRepository(dbService registry.DbService) *DummyRepository {
	return &DummyRepository{
		dbService: dbService,
	}
}

// Save performs an upsert operation on the Dummy entity.
// If the Dummy has no ID (new entity), it performs an INSERT and sets the autogenerated ID.
// If the Dummy has an ID (existing entity), it performs an UPDATE.
func (r *DummyRepository) Save(ctx context.Context, dummy *Dummy) error {
	if dummy == nil {
		return fmt.Errorf("dummy cannot be nil")
	}

	db := r.dbService.Db()
	if db == nil {
		return fmt.Errorf("database connection is nil")
	}

	if dummy.GetId() == 0 {
		// New entity - perform INSERT
		return r.insert(ctx, db, dummy)
	} else {
		// Existing entity - perform UPDATE
		return r.update(ctx, db, dummy)
	}
}

// insert performs an INSERT operation for a new Dummy entity and sets the autogenerated ID
func (r *DummyRepository) insert(ctx context.Context, db *sql.DB, dummy *Dummy) error {
	query := "INSERT INTO dummy (name) VALUES (?)"
	result, err := db.ExecContext(ctx, query, dummy.GetName())
	if err != nil {
		return fmt.Errorf("failed to insert dummy: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return fmt.Errorf("failed to get last insert id: %w", err)
	}

	dummy.AddIdentity(int(id))
	return nil
}

// update performs an UPDATE operation for an existing Dummy entity
func (r *DummyRepository) update(ctx context.Context, db *sql.DB, dummy *Dummy) error {
	query := "UPDATE dummy SET name = ? WHERE id = ?"
	result, err := db.ExecContext(ctx, query, dummy.GetName(), dummy.GetId())
	if err != nil {
		return fmt.Errorf("failed to update dummy: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("failed to get rows affected: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("dummy with id %d not found", dummy.GetId())
	}

	return nil
}
